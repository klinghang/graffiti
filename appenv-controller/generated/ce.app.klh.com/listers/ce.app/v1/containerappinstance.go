/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "appenv-controller/apis/ce.app/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ContainerAppInstanceLister helps list ContainerAppInstances.
// All objects returned here must be treated as read-only.
type ContainerAppInstanceLister interface {
	// List lists all ContainerAppInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ContainerAppInstance, err error)
	// ContainerAppInstances returns an object that can list and get ContainerAppInstances.
	ContainerAppInstances(namespace string) ContainerAppInstanceNamespaceLister
	ContainerAppInstanceListerExpansion
}

// containerAppInstanceLister implements the ContainerAppInstanceLister interface.
type containerAppInstanceLister struct {
	indexer cache.Indexer
}

// NewContainerAppInstanceLister returns a new ContainerAppInstanceLister.
func NewContainerAppInstanceLister(indexer cache.Indexer) ContainerAppInstanceLister {
	return &containerAppInstanceLister{indexer: indexer}
}

// List lists all ContainerAppInstances in the indexer.
func (s *containerAppInstanceLister) List(selector labels.Selector) (ret []*v1.ContainerAppInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ContainerAppInstance))
	})
	return ret, err
}

// ContainerAppInstances returns an object that can list and get ContainerAppInstances.
func (s *containerAppInstanceLister) ContainerAppInstances(namespace string) ContainerAppInstanceNamespaceLister {
	return containerAppInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ContainerAppInstanceNamespaceLister helps list and get ContainerAppInstances.
// All objects returned here must be treated as read-only.
type ContainerAppInstanceNamespaceLister interface {
	// List lists all ContainerAppInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ContainerAppInstance, err error)
	// Get retrieves the ContainerAppInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ContainerAppInstance, error)
	ContainerAppInstanceNamespaceListerExpansion
}

// containerAppInstanceNamespaceLister implements the ContainerAppInstanceNamespaceLister
// interface.
type containerAppInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ContainerAppInstances in the indexer for a given namespace.
func (s containerAppInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1.ContainerAppInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ContainerAppInstance))
	})
	return ret, err
}

// Get retrieves the ContainerAppInstance from the indexer for a given namespace and name.
func (s containerAppInstanceNamespaceLister) Get(name string) (*v1.ContainerAppInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("containerappinstance"), name)
	}
	return obj.(*v1.ContainerAppInstance), nil
}
